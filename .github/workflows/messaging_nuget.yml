name: Build and publish Bz.Fott.Administration.Messaging NuGet package into GitHub feeds

on:
  workflow_dispatch: {}
  push:
    paths:
    - 'src/Shared/Bz.Fott.Administration.Messaging/**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NUGET_DIRECTORY: ${{ github.workspace}}/nuget
  NUGET_FEED_URL: ${{ vars.NUGET_FEED_URL }}

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    - run: dotnet pack "${{ env.WORKING_DIRECTORY }}/src/Shared/Bz.Fott.Administration.Messaging/Bz.Fott.Administration.Messaging.csproj" --configuration Release --output ${{ env.NUGET_DIRECTORY }}
    
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.NuGetDirectory }}/*.nupkg

  # run_test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v3
  #   - name: Run tests
  #     run: dotnet test --configuration Release

  deploy_nuget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NUGET_DIRECTORY }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      - name: Publish NuGet package
        run: |
          dotnet nuget push "${{ env.NUGET_DIRECTORY }}/Bz.Fott.Administration.Messaging.*.nupkg" --api-key "${{ secrets.NUGET_APIKEY }}" --source ${{ env.NUGET_FEED_URL }} --skip-duplicate
          # foreach($file in (Get-ChildItem "${{ env.NUGET_DIRECTORY }}" -Recurse -Include *.nupkg)) {
          #     dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          # }
