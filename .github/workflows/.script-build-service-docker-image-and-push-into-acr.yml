on:
  workflow_call:
    inputs:
      ENVIRONMENT_TYPE:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true
      REGISTRY_LOGIN_SERVER:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

env:
  PROJECT_NAME: f8t
  SERVICE_NAME: admin
  DOTNET_VERSION: 7.0.x

jobs:
  build-service-docker-image-and-push-into-acr:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT_TYPE }}
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Fetch version
      id: fetch_version
      run: |
        if [ ${{inputs.ENVIRONMENT_TYPE}} == 'uat' || ${{inputs.ENVIRONMENT_TYPE}} == 'prod' ]; then
          echo "VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT # Tag name as a container image version
        else
          echo "VERSION=${{ github.sha }}" >> $GITHUB_OUTPUT # SHA as a container image version
        fi

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Tests
      run: dotnet test ./test/Bz.F8t.Administration.Domain.UnitTests/Bz.F8t.Administration.Domain.UnitTests.csproj

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
       docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/bz-${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}:${{ steps.fetch_version.outputs.VERSION }} -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/bz-${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}:latest -f ./src/Bz.F8t.Administration.WebAPI/Dockerfile
       docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/bz-${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }} --all-tags

    # TODO: Scan docker images for vulnerabilities
